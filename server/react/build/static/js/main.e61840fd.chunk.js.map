{"version":3,"sources":["components/Dropzone.js","api/classifyImage.js","components/ClassificationSummary.js","components/ImageSummary.js","components/UploadedImages.js","components/App.js","serviceWorker.js","reducers/images.js","reducers/index.js","index.js","store/index.js"],"names":["Dropzone","onDrop","useState","files","useDropzone","accept","getRootProps","getInputProps","useEffect","forEach","file","URL","revokeObjectURL","preview","className","style","textAlign","Card","marginTop","classifyImage","a","formData","FormData","append","fetch","method","body","then","res","json","ClassificationSummary","classifications","reduce","b","classificationName","console","log","Grid","Typography","variant","img","display","width","height","ImageSummary","classification","setClassification","Object","entries","fetchData","key","name","src","alt","Box","thumbsContainer","flexDirection","flexWrap","UploadedImages","thumbs","images","map","useStyles","makeStyles","theme","appBar","position","layout","marginLeft","spacing","marginRight","breakpoints","up","paper","marginBottom","padding","stepper","buttons","justifyContent","button","Boolean","window","location","hostname","match","state","action","type","image","id","combineReducers","preloadedState","store","configureStore","reducer","rootReducer","ReactDOM","render","classes","setImages","Fragment","CssBaseline","AppBar","color","Toolbar","noWrap","acceptedFiles","assign","createObjectURL","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e61840fd.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { Card } from \"@material-ui/core\";\r\n\r\nexport default function Dropzone({ onDrop }) {\r\n  const [files, setFiles] = useState([]);\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    accept: \"image/*\",\r\n    onDrop\r\n  });\r\n\r\n  useEffect(\r\n    () => () => {\r\n      // Make sure to revoke the data uris to avoid memory leaks\r\n      files.forEach(file => URL.revokeObjectURL(file.preview));\r\n    },\r\n    [files]\r\n  );\r\n\r\n  return (\r\n    <section className=\"container\" style={{ textAlign: \"center\" }}>\r\n      <Card style={{ marginTop: \"10px\" }}>\r\n        <div {...getRootProps({ className: \"dropzone\" })}>\r\n          <input {...getInputProps()} />\r\n          <p>Drag 'n' drop some files here, or click to select files</p>\r\n        </div>\r\n      </Card>\r\n    </section>\r\n  );\r\n}\r\n","/**\r\n * Uploads an image of a flower and classifies it.\r\n * @param {Object} file The uploaded image\r\n */\r\nexport default async function classifyImage(file) {\r\n    // Create payload\r\n    const formData = new FormData();\r\n    formData.append('file', file)\r\n\r\n    return fetch(\"/api/file\", {\r\n        method: 'POST',\r\n        body: formData\r\n      }).then(res => res.json())\r\n}","import React from 'react'\r\nimport { Typography, Grid } from '@material-ui/core'\r\n\r\nexport default function ClassificationSummary({ classifications }) {\r\n\r\n    let [classificationName, classificationProbability] = classifications.reduce((a, b) => a[1] > b[1] ? a : b)\r\n    console.log(classifications)\r\n    return <Grid>\r\n        <Typography variant=\"h5\">{classificationName}</Typography>\r\n    </Grid>\r\n\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Card, Grid, Box } from \"@material-ui/core\";\r\nimport classifyImage from \"../api/classifyImage\";\r\nimport ClassificationSummary from \"./ClassificationSummary\";\r\nconst img = {\r\n  display: \"block\",\r\n  width: \"auto\",\r\n  height: \"100%\"\r\n};\r\n\r\nexport default function ImageSummary({ file }) {\r\n  const [classification, setClassification] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const { classification: res } = await classifyImage(file);\r\n      setClassification(Object.entries(res));\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <Card key={file.name}>\r\n      <Grid>\r\n        <img src={file.preview} style={img} alt=\"preview\" />\r\n        <Box style={{ textAlign: \"center\" }}>\r\n          {classification ? (\r\n            <ClassificationSummary classifications={classification} />\r\n          ) : (\r\n            <p>Loading...</p>\r\n          )}\r\n        </Box>\r\n      </Grid>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ImageSummary from \"./ImageSummary\";\r\n\r\nconst thumbsContainer = {\r\n  display: \"flex\",\r\n  flexDirection: \"row\",\r\n  flexWrap: \"wrap\",\r\n  marginTop: 16\r\n};\r\n\r\n\r\nexport default function UploadedImages({ images }) {\r\n  const thumbs = images.map(file => (\r\n    <ImageSummary file={file} />\r\n  ));\r\n\r\n  return (\r\n    <Grid>\r\n      <aside style={thumbsContainer}>{thumbs}</aside>\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Dropzone from \"./Dropzone\";\r\nimport UploadedImages from \"./UploadedImages\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  appBar: {\r\n    position: \"relative\"\r\n  },\r\n  layout: {\r\n    width: \"auto\",\r\n    marginLeft: theme.spacing(2),\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n      width: 600,\r\n      marginLeft: \"auto\",\r\n      marginRight: \"auto\"\r\n    }\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(3),\r\n    marginBottom: theme.spacing(3),\r\n    padding: theme.spacing(2),\r\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n      marginTop: theme.spacing(6),\r\n      marginBottom: theme.spacing(6),\r\n      padding: theme.spacing(3)\r\n    }\r\n  },\r\n  stepper: {\r\n    padding: theme.spacing(3, 0, 5)\r\n  },\r\n  buttons: {\r\n    display: \"flex\",\r\n    justifyContent: \"flex-end\"\r\n  },\r\n  button: {\r\n    marginTop: theme.spacing(3),\r\n    marginLeft: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nexport default function App() {\r\n  const classes = useStyles();\r\n  const [images, setImages] = useState([]);\r\n\r\n  const onDrop = acceptedFiles => {\r\n\r\n    for (let file of acceptedFiles) {}\r\n\r\n    setImages(\r\n      acceptedFiles.map(file =>\r\n        Object.assign(file, {\r\n          preview: URL.createObjectURL(file)\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <AppBar position=\"absolute\" color=\"default\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n            Iris Classifier - Ohad Chaet\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <main className={classes.layout}>\r\n        <Dropzone onDrop={onDrop} />\r\n        <UploadedImages images={images} />\r\n      </main>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const images = (state = [], action) => {\r\n    switch (action.type) {\r\n      case 'ADD_IMAGE':\r\n        return [\r\n          ...state,\r\n          ...action.image\r\n        ]\r\n      case 'CLASSIFY_IMAGE':\r\n        return state.map(image =>\r\n          (image.id === action.id)\r\n            ? {...image, classification: action.classification}\r\n            : image\r\n        )\r\n      default:\r\n        return state\r\n    }\r\n  }\r\n  \r\n  export default images","import { combineReducers } from \"redux\";\r\nimport images from \"./images\";\r\n\r\nexport default combineReducers({\r\n  images\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"typeface-roboto\";\r\nimport { Provider } from \"react-redux\";\r\nimport configureAppStore from './store/index';\r\n\r\nconst store = configureAppStore();\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import rootReducer from \"../reducers\";\r\nimport { configureStore } from \"redux-starter-kit\";\r\n\r\n\r\nexport default function configureAppStore(preloadedState) {\r\n  const store = configureStore({\r\n    reducer: rootReducer,\r\n    preloadedState\r\n  });\r\n\r\n  return store;\r\n}\r\n"],"sourceRoot":""}